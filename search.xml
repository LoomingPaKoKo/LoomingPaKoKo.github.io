<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>js中无限递归一定会导致栈溢出吗？</title>
      <link href="/2023/09/27/%E6%97%A0%E9%99%90%E9%80%92%E5%BD%92%E4%B8%8D%E4%B8%80%E5%AE%9A%E5%AF%BC%E8%87%B4%E6%A0%88%E6%BA%A2%E5%87%BA/"/>
      <url>/2023/09/27/%E6%97%A0%E9%99%90%E9%80%92%E5%BD%92%E4%B8%8D%E4%B8%80%E5%AE%9A%E5%AF%BC%E8%87%B4%E6%A0%88%E6%BA%A2%E5%87%BA/</url>
      
        <content type="html"><![CDATA[<p><em><strong>关于栈溢出，我们通常会感觉无限递归会导致栈溢出。但是一定如此吗？</strong></em></p><hr><h3 id="什么是栈溢出"><a href="#什么是栈溢出" class="headerlink" title="什么是栈溢出"></a>什么是栈溢出</h3><p>栈是一块 <strong>内存空间</strong> ，而每一次函数调用，就相当于往内存空间内加入一个执行上下文。当这个函数没有执行完时，又调用了另一个函数（比方说自身），这个时候就又会往内存空间内加入一个执行上下文。反复如此的话，栈会被撑满，空间不够了，这就叫栈溢出。</p><p>例如下面这段代码就是个典型的无限递归场景。<br>在foo()调用结束之前又调用了foo()，因此会导致栈溢出。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><h3 id="什么情况下无限递归不会导致栈溢出"><a href="#什么情况下无限递归不会导致栈溢出" class="headerlink" title="什么情况下无限递归不会导致栈溢出"></a>什么情况下无限递归不会导致栈溢出</h3><p>例如下面这种情况，就不会导致栈溢出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(foo,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>在调用foo()时，往执行栈内加入一个上下文。而在该上下文执行期间，会开启一个定时器，而计时器到达之后，会再一次执行foo函数。<strong>但由于JS语言是异步的</strong>，也就是说，foo函数本身不会等待计时器结束。<br>foo()在创建完计时器后，会运行结束，随后出栈。随后计时器到达，加入事件队列，而后执行上下文，调用foo()，重复该步骤，因此栈不会溢出。</p><h4 id="变种"><a href="#变种" class="headerlink" title="变种"></a>变种</h4><p>若是这种情况，则会导致栈溢出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="title function_">foo</span>(),<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure><p>这是因为在开启定时器前，需要将foo()作为参数传入，所以会先执行foo()将其返回结果作为参数传入setTimeout。故变成了在计时之前调用foo()，因此会导致栈溢出。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
